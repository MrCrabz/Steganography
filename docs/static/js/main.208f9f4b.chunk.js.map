{"version":3,"sources":["main/components/Encode.js","main/components/Decode.js","main/MainPage.js","App.js","serviceWorker.js","index.js"],"names":["Encode","props","getMain","state","showImage","binaryMessage","callCount","button","type","Input","name","label","placeholder","onChange","handleChange","FileInput","accept","className","H5","color","value","onClick","showPicture","disabled","H3","ref","e","target","files","setState","URL","createObjectURL","drawOriginalPicture","picture","img","Image","canvas","refs","originalC","src","context","getContext","width","height","onload","drawImage","imageData","getImageData","originalImg","callEncode","encodeMessage","messageC","message","messageContext","console","log","pixel","data","i","n","length","offset","binaryChar","charCodeAt","toString","messageImg","counter","parseInt","putImageData","navActive","string","file","any","this","Component","Decode","decodedMessage","title","statusColor","body","callDecode","decodeMessage","output","c","j","String","fromCharCode","MainPage","Header","subTitle","Item","icon","active","Row","cards","deck","Col","md","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.208f9f4b.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { string, file, any } from 'prop-types';\nimport { Alert, Form, Button, Header, Badge } from 'tabler-react'\n\nclass Encode extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            button: \"Upload\",\n            navActive: 1,\n            message: string,\n            picture: file,\n            showImage: false,\n            callCount: 0,\n            binaryMessage: string,\n            messageImg: any,\n            originalImg: any\n        }\n    }\n    getMain = () => {\n        const { showImage, binaryMessage, callCount, button } = this.state\n        return(\n            <div>\n                <Alert type=\"info\">\n                    To encode your message, you can import in here. :)\n                </Alert>\n                <Form>\n                    <Form.Input name='message' label='Message' placeholder='Enter Your Message' onChange={this.handleChange} />\n                    <Form.FileInput name='picture' label='Picture - Only JPG and PNG' accept=\"jpg, png\" onChange={this.handleChange} />\n                </Form>\n                    {callCount>1 ?  \n                        <div className=\"binary\">\n                            <Header.H5>Binary Message</Header.H5>\n                            <Badge color=\"success\">{callCount>2 ? binaryMessage : \"Will calculate...\"}</Badge>\n                        </div>\n                            : \n                        <div></div>\n                    }\n                <Button color=\"primary\" value='Submit' onClick={this.showPicture} disabled={callCount>3}>{button}</Button>\n                {/* <Button color=\"primary\" value='Submit' onClick={this.encodeMessage}>Encode</Button> */}\n                          \n                {\n                    showImage ? <div>\n                                    <div>\n                                        <Header.H3>Original</Header.H3>\n                                        <canvas ref=\"originalC\"></canvas>\n                                    </div>\n                                    <div>\n                                        <Header.H3>Message</Header.H3>\n                                        <canvas ref=\"messageC\"></canvas>\n                                    </div>\n                                </div> : \n                                <div>\n                                   \n                                </div>\n                }\n            </div>\n        )\n    }\n    handleChange = e => {\n        if(e.target.files)\n            this.setState({[e.target.name]: URL.createObjectURL(e.target.files[0])})\n        else\n            this.setState({[e.target.name]: e.target.value})\n    }\n    showPicture = () => {\n        const { callCount } = this.state\n        this.setState({showImage: true}, this.drawOriginalPicture())\n        switch (callCount){\n            case 0:\n                this.setState({button: \"Show Image\"})\n                break\n            case 1:\n                this.setState({button: \"Encode\"})\n                break\n            default: \n                this.setState({button: \"Encode\"})\n        }\n    }\n    drawOriginalPicture = () => {\n        const { picture, callCount } = this.state\n        const img = new Image();\n        this.setState({callCount: callCount+1})\n        const canvas = this.refs.originalC\n        img.src = picture\n        if(callCount===1){\n            const context = canvas.getContext('2d')\n            canvas.width = img.width\n            canvas.height = img.height\n            img.onload = () => {\n                context.drawImage(img, 0, 0);\n                if(canvas.width > 0){\n                    const imageData = context.getImageData(0,0,canvas.width,canvas.height);\n                    this.setState({originalImg: imageData})\n                }\n            }\n            this.callEncode()\n        }\n        if(callCount>1)\n            this.callEncode()\n    }\n    callEncode = canvas =>{\n        this.encodeMessage()\n    }\n    encodeMessage = () => {\n        const { messageC } = this.refs\n        const { message, originalImg } = this.state\n        const messageContext = messageC.getContext(\"2d\");\n\n        const width = originalImg.width\n        const height = originalImg.height\n        console.log(originalImg)\n\n        messageC.width =  width\n        messageC.height = height\n        let pixel = originalImg.data;\n        if(originalImg.width > 0){\n            for (let i = 0, n = pixel.length; i < n; i += 4) {\n                for (let offset =0; offset < 3; offset ++) {\n                    if(pixel[i + offset] %2 !== 0) {\n                        pixel[i + offset]--;\n                    }\n                }\n            }\n            console.log(originalImg)\n        }\n        let binaryMessage = \"\";\n        console.log(message)\n        for (let i = 0; i < message.length; i++) {\n            let binaryChar = message[i].charCodeAt(0).toString(2);\n            console.log(binaryChar)\n            while(binaryChar.length < 8) {\n            binaryChar = \"0\" + binaryChar;\n            }\n\n            binaryMessage += binaryChar;\n        }\n        this.setState({binaryMessage: binaryMessage})\n        if(originalImg.width > 0){\n        const messageImg = originalImg\n        pixel = messageImg.data;\n        let counter = 0;\n        for (var i = 0, n = pixel.length; i < n; i += 4) {\n            for (var offset =0; offset < 3; offset ++) {\n            if (counter < binaryMessage.length) {\n                pixel[i + offset] += parseInt(binaryMessage[counter]);\n                counter++;\n            }\n            else {\n                break;\n            }\n            }\n        }\n        this.setState({messageImg: messageImg})\n        messageContext.putImageData(messageImg, 0, 0)\n        }\n    }\n    render() {\n        return ( this.getMain() )\n    }\n}\nexport default Encode\n","import React, { Component } from 'react'\nimport { string, file, any } from 'prop-types';\nimport { Alert, Form, Button, Header, Badge, Card } from 'tabler-react'\n\n\nclass Decode extends Component {\n    constructor(props) {\n        super(props)\n    \n        this.state = {\n             decodedMessage: string,\n             button: \"Upload\",\n             showImage: false,\n             picture: file,\n             messageImg: any,\n             callCount: 0\n        }\n    }\n    getMain = () => {\n        const { decodedMessage, callCount, button, showImage } = this.state\n        return(\n            <div>\n                <Alert type=\"info\">\n                    To decode your picture, you can import in here. :)\n                </Alert>\n                <Form>\n                    <Form.FileInput name='picture' label='Picture - Only JPG and PNG' accept=\"jpg, png\" onChange={this.handleChange} />\n                </Form>\n                    {callCount>1 ?  \n                        <div className=\"binary\">\n                            <Card\n                            title=\"Decoded Message\"\n                            statusColor=\"red\"\n                            className=\"card-Talker\"\n                            body={<Badge color=\"success\">{callCount>2 ? decodedMessage : \"Will calculate...\"}</Badge>}\n                            />\n                        </div>\n                            : \n                        <div></div>\n                    }\n                <Button color=\"primary\" value='Submit' onClick={this.showPicture} disabled={callCount>2}>{button}</Button>\n                {/* <Button color=\"primary\" value='Submit' onClick={this.encodeMessage}>Encode</Button> */}\n                          \n                {\n                    showImage ? <div>\n                                    <div>\n                                        <Header.H3>Picture</Header.H3>\n                                        <canvas ref=\"messageC\"></canvas>\n                                    </div>\n                                </div> : \n                                <div>\n                                   \n                                </div>\n                }\n            </div>\n        )\n    }\n    handleChange = e => {\n        if(e.target.files)\n            this.setState({[e.target.name]: URL.createObjectURL(e.target.files[0])})\n        else\n            this.setState({[e.target.name]: e.target.value})\n    }\n    showPicture = () => {\n        const { callCount } = this.state\n        console.log(this.state)\n        this.setState({showImage: true}, this.drawOriginalPicture())\n        switch (callCount){\n            case 0:\n                this.setState({button: \"Show Image\"})\n                break\n            case 1:\n                this.setState({button: \"Decode\"})\n                break\n            default: \n                this.setState({button: \"Decode\"})\n        }\n    }\n    drawOriginalPicture = () => {\n        const { picture, callCount } = this.state\n        const img = new Image();\n        this.setState({callCount: callCount+1})\n        const canvas = this.refs.messageC\n        img.src = picture\n        if(callCount===1){\n            const context = canvas.getContext('2d')\n            canvas.width = img.width\n            canvas.height = img.height\n            img.onload = () => {\n                context.drawImage(img, 0, 0);\n                if(canvas.width > 0){\n                    const imageData = context.getImageData(0,0,canvas.width,canvas.height);\n                    this.setState({messageImg: imageData}, this.callDecode(imageData))\n                }\n            }\n        }\n    }\n    callDecode = messageImg =>{\n        this.decodeMessage(messageImg)\n    }\n    decodeMessage = (messageImg) => {\n        const { messageC } = this.refs\n        const messageContext = messageC.getContext(\"2d\");\n        console.log(messageImg)\n        const width = messageImg.width\n        const height = messageImg.height\n\n        const original = messageContext.getImageData(0, 0, width, height);\n        let binaryMessage = \"\";\n        let pixel = original.data;\n        for (let i = 0, n = pixel.length; i < n; i += 4) {\n            for (var offset =0; offset < 3; offset ++) {\n            let value = 0;\n            if(pixel[i + offset] %2 !== 0) {\n                value = 1;\n            }\n\n            binaryMessage += value;\n            }\n        }\n\n        let output = \"\";\n        for (let i = 0; i < binaryMessage.length; i += 8) {\n            let c = 0;\n            for (let j = 0; j < 8; j++) {\n            c <<= 1;\n            c |= parseInt(binaryMessage[i + j]);\n            }\n            output += String.fromCharCode(c);\n        }\n        this.setState({decodedMessage: output})\n    }\n    \n\n    render() {\n        return ( this.getMain() )\n    }\n}\nexport default Decode\n","import React, { Component } from 'react'\nimport { Container, Page, Nav, Grid, Card } from 'tabler-react'\nimport \"tabler-react/dist/Tabler.css\";\nimport './MainPage.css'\nimport Encode from './components/Encode';\nimport Decode from './components/Decode';\nclass MainPage extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            navActive: 1\n        }\n    }\n    render() {\n        const { navActive } = this.state\n        return (\n            <Container>\n                <Page>\n                    <Page.Header\n                        title=\"Steganography - Information Security Task\"\n                        subTitle=\"baykatre.com\"\n                    />\n                    <Nav>\n                        <Nav.Item icon=\"globe\" active={navActive===1} onClick={()=>this.setState({navActive: 1})}>Encode</Nav.Item>\n                        <Nav.Item icon=\"map\" active={navActive===2} onClick={()=>this.setState({navActive: 2})}>Decode</Nav.Item>\n                    </Nav>\n                    <Grid.Row cards deck>\n                        <Grid.Col md={10} offset={1} className=\"column\">\n                            {navActive===1 ? \n                                <Card \n                                title=\"Encode Message\"\n                                className=\"card\"\n                                body={<Encode/>}\n                                />\n                                :\n                                <Card \n                                title=\"Decode Message\"\n                                className=\"card\"\n                                body={<Decode/>}\n                                />\n                        }\n                        </Grid.Col>\n                    </Grid.Row>\n                </Page>\n            </Container>\n        )\n    }\n}\nexport default MainPage\n","import React from 'react';\nimport MainPage from './main/MainPage';\n\nfunction App() {\n  return (\n    <MainPage/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}